<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
					   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd   
					   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
					   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
					   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<context:property-placeholder location="classpath:druid-config.properties"/>

	<import resource="classpath*:datasource.xml" />
			
	<!-- 数据层操作类 -->
	<bean id="accountDao" class="com.himalaya.demo2.AccountDaoImpl">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
		
	<!-- 服务层操作类 -->
	<bean id="accountService" class="com.himalaya.demo2.AccountServiceImpl">
		<property name="accountDao" ref="accountDao" />
	</bean>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>	
	</bean>
	
	<!-- 配置业务层的代理 -->
	<bean id="accountServiceProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<!-- 目标对象 -->
		<property name="target" ref="accountService"></property>
		<!-- 事务管理器 -->
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<props>
				<!-- prop format
						PROPAGATION
							PROPAGATION_REQUIRED		使用当前事务，如果不存在事务，则新建一个事务
							PROPAGATION_SUPPORTS		使用当前事务，如果不存在就不使用事务
							PROPAGATION_MANDATORY		使用当前事务，如果不存在则抛出异常
														
							PROPAGATION_REQUIRES_NEW	如果当前事务存在则挂起当前事务，并创建一个新事务
							PROPAGATION_NOT_SUPPORTED	不使用事务，如果当前有事务，则挂起当前事务
							PROPAGATION_NEVER			不使用事务，如果当前有事务，则抛出异常
							
							PROPAGATION_NESTED			使用嵌套事务
							
						ISOLATION
							ISOLATION_DEFAULT
							ISOLATION_READ_UNCOMMITTED
							ISOLATION_READ_COMMITTED
							ISOLATION_REPEATABLE_READ
							ISOLATION_SERIALIZABLE
							
						readOnly
						-Exception
						+Exception
				 -->
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="transfer*">PROPAGATION_REQUIRED</prop>
				<prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>
		
</beans>